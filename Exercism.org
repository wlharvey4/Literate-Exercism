# -*- mode:org; fill-column:79; -*-

#+TITLE:Exercism Exercises
#+SUBTITLE: Version {{{version}}} {{{time(%F %R)}}}
#+AUTHOR:WLHarvey4
#+DATE: <2019-01-14 Mon 20:15>

#+MACRO:version 0.0.5

EXERCISM---Code Practice and mentorship for Everyone

Version {{{version}}} Date {{{date(%m-%d-%Y)}}}

Level up your programming skills with 2,643 exercises across 48 languages, and
insightful discussion with our dedicated team of welcoming mentors. Exercism is
100% free forever.

* Exercism
  #+TEXINFO: @iftex
  EXERCISM---Code Practice and mentorship for Everyone

  Level up your programming skills with 2,643 exercises across 48 languages, and
  insightful discussion with our dedicated team of welcoming mentors. Exercism is
  100% free forever.
  #+TEXINFO: @end iftex

** About Exercism

   {{{heading(What is Exercism?)}}}

   Exercism is an online platform designed to help you improve your coding
   skills through practice and mentorship.

   Exercism provides you with thousands of exercises spread across numerous
   language tracks. Once you start a language track you are presented with a
   core set of exercises to complete. Each one is a fun and interesting
   challenge designed to teach you a little more about the features of a
   language.

   You complete a challenge by downloading the exercise to your computer and
   solving it in your normal working environment. Once you've finished you
   submit it online and one of our mentors will give you feedback on how you
   could improve it using features of the language that you may not be familiar
   with. After a couple of rounds of refactoring, your exercise will be
   complete and you will unlock both the next core exercise and also a series
   of related side-exercises for you to practice with.

   #+cindex: mentors
   #+cindex: track maintainers
   #+cindex: contributors
   Exercism is entirely open source and relies on the contributions of
   thousands of wonderful people, including our [[https://exercism.io/team][leadership team]], our [[https://exercism.io/team/mentors][mentors]],
   our [[https://exercism.io/team/maintainers][track maintainers]], and thousands of [[https://exercism.io/team/contributors][contributors]].

   Exercism is designed to be fun and friendly, and we place a strong emphasis
   on empathetic communication. If you have any questions or concerns about

   #+cindex: FAQ
   #+cindex: contact
   Exercism, you can browse our [[https://exercism.io/faqs][FAQs]] or [[https://exercism.io/contact][contact us]].

   Sign up and have fun. Exercism is 100% free :)

** How Exercism Works

   #+cindex: how Exercism works
   Learning through Exercism is quite different to other programming websites,
   with a focus on individual practice and mentor-based learning. Here's how it
   works.

   1. Choose a language to master

      Object   oriented,  functional,   popular,   emerging,   or  just   plain
      obscure. With 48  different languages to explore,  Exercism has something
      for you!

   2. Complete a coding challenge on your computer

      All the coding happens on your machine in an environment you're familiar
      with. Download the template, solve the problem, and then upload your
      solution.

   3. Upload your solution and review it with a mentor

      Discussing code is one of the best ways to learn. Our friendly mentors
      will comment on your solutions online, introducing you to new ideas and
      techniques.

   4. Unlock different concepts and exercises

      Our tracks have between 40 and 100 exercise each - some are fun, some are
      tricky, some are weird, but all will teach you something new.

   5. Complete the language track and achieve fluency

      At the end of your language track you will have mastered the core
      concepts and idioms of your language and be ready to use it in the real
      world.

** Available Language Tracks

   #+cindex: language tracks
   There are 48 different language tracks on Exercism for you to explore.

   - Ballerina
   - Bash
   - C
   - C#
   - C++
   - CFML
   - Clojure
   - CoffeeScript
   - Common Lisp
   - Crystal
   - D
   - Dart
   - Delphi Pascal
   - Elixir
   - Elm
   - Emacs Lisp
   - Erlang
   - F#
   - Go
   - Haskell
   - Java
   - JavaScript
   - Julia
   - Kotlin
   - LFE
   - Lua
   - MIPS
   - Nim
   - Objective-C
   - OCaml
   - Perl5
   - Perl6
   - PHP
   - PL/SQL
   - Prolog
   - PureScript
   - Python [[#python][Python exercises]]
   - R
   - Racket
   - ReasonML
   - Ruby
   - Rust
   - Scala
   - Scheme
   - Standard ML
   - Swift
   - TypeScript
   - Vim Script

** Getting Started

   #+texinfo: @heading Help! What do I do?

   #+cindex: instructions
   We know using a new product can be daunting, and Exercism is a little
   complicated. So here's a really simple set of instructions to get you
   started.

      {{{subheading(Sign Up)}}}
      #+cindex: sign up
   1. Sign up at ~exercism.io~ using either your GitHub account, or by using
      your email address and choose a password.
   2. If you sign up using an email address, you now need to confirm it. Look
      for the email, click the link, then log in.

      {{{subheading(Pick a Language Track)}}}

   3. [@3]You will now see a list of all the [[https://exercism.io/tracks][language tracks]] you can join. You
      can click through as many as you want to explore.
   4. Once you've found a language you want to join, click the "Join Track"
      button.
   5. You will now be taken into your new track. You'll see a core set of
      exercises at the top and some side-exercises below.
      #+cindex: Hello World
   6. Start with the first core exercise on the track, which is normally
      called "Hello World". Click on the exercise to begin.
      #+cindex: Walkthrough
   7. You will see some information and some instructions on the left-hand
      side and a button on the right-hand side labelled "Begin
      Walkthrough". Click on this and follow the instructions.

      {{{subheading(Submit your solution, mentoring)}}}

      #+cindex: upload solution
   8. You should now have the CLI installed and the exercise downloaded to your
      computer. Solve the exercise and then upload it using ~exercism submit
      /PATH/TO/SOLUTION~
   9. In your web-browser, go back to the [[https://exercism.io/tracks][language tracks]] page, choose your
      exercise and the exercise you've just worked on. You will now see your
      solution online and notice that it is awaiting a mentor.
       #+cindex: mentor feedback
       #+cindex: feedback
   10. A mentor will now come and give you feedback on your solution. This can
       happen really quickly (15 minutes) or take a little while (a day or two)
       depending on demand. In the meantime, you will find other exercises on
       your track are available for you to solve!

       {{{subheading(Iterations, resubmit)}}}

   11. Once you've received feedback, you can make some changes to your
       solution and then resubmit it (see step 8). This may happen a couple of
       times before the solution is approved.
   12. Once the solution is approved by a mentor, you click 'complete' to mark
       the solution completed. This will unlock lots more exercises.

       {{{subheading(Get involved: mentoring or maintaining a track)}}}

   13. You're now an Exercism pro! =:)=
   14. Fancy giving back to Exercism and helping others? We always need more
       [[http://mentoring.exercism.io/][mentors]] and [[https://exercism.io/become-a-maintainer][track maintainers]] and we'd love you to get involved!


   {{{heading(Just want to download the new CLI?)}}}

   #+cindex: GittHub
   #+cindex: release, latest
   You can always get the [[http://github.com/exercism/cli/releases/latest][latest release on GitHub]].

   {{{heading(Still stuck?)}}}

   #+cindex: FAQ
   #+cindex: contact
   Check out our [[https://exercism.io/faqs][FAQs]] or [[https://exercism.io/contact][contact us]].

* Python
  :PROPERTIES:
  :CUSTOM_ID: python
  :END:

** About
   Python is a clear and powerful object-oriented programming language with an
   elegant and easy-to-read syntax. It is ideal for prototyping and ad-hoc
   tasks, but also sees wide use in scientific computing, web development, and
   automation.

   Python Exercism offers 111 exercises

** Guides

*** Running the Tests
:CI:
#+CINDEX:tests, running
:END:

**** Installing ~pytest~
:CI:
#+CINDEX:testing tool, ~pytest~
#+CINDEX:unit tests
#+CINDEX:~pytest~
#+CINDEX:~pytest-cache~
#+CINDEX:pip3
:END:
     We recommend you install ~pytest~ and ~pytest-cache~.  ~pytest~ is a
     testing tool that will give you more flexibility over running your unit
     tests.

     If you want the version of ~pytest~ for Python 3, then use
     @@texinfo:@command{pip3}@@.
     : pip3 install pytest pytest-cache

     Note: Whichever version of ~pytest~ you install last will be the default
     one used whenever ~pytest~ is executed, regardless of whether you have
     installed both versions.

     If you have either version of ~pytest~ installed and you want to
     specifically run one of the versions, you can run that version by using
     python with the @@texinfo:@option{-m}@@ flag.
     : $ python3 -m pytest --version

**** Testing Without ~pytest~
     If you choose not to install ~pytest~, you can still run tests individually
     and skip the rest of this tutorial:
     #+BEGIN_EXAMPLE
     cd exercism/python/bob
     python bob_test.py
     #+END_EXAMPLE

**** Run All Tests
:CI:
#+CINDEX:tests, run all
:END:
     To run all tests for a specific exercise (we will take the ~bob.py~
     exercise as an example here), place yourself in the directory where that
     exercise has been fetched and run:
     : pytest bob_test.py

     *Note:* To run the tests you need to pass the name of the testsuite
     file to ~pytest~ (generally, the file ending with ~_test.py~), NOT the file
     you created to solve the problem (which is your implementation).

**** Stop After Failure
:CI:
#+CINDEX:tests, stop after failure
:END:
     The above will run all the tests, whether they fail or not.  If you'd
     rather stop the process and exit on the first failure, run:
     : pytest -x bob_test.py

**** Failed Tests First
:CI:
#+CINDEX:tests, failed tests first
:END:
     ~pytest-cache~ remembers which tests failed, and can run those tests first:
     : pytest --ff bob_test.py

**** Running All Tests for All Exercises
:CI:
#+CINDEX:tests, all tests, all exercises
:END:
     #+BEGIN_EXAMPLE
     cd exercism/python/
     pytest
     #+END_EXAMPLE

*** Recommended Workflow
    We recommend you run this command while working on exercises:
    : pytest -x --ff bob_test.py

*** Python Debugger
:CI:
#+CINDEX:debugger
#+CINDEX:pdb
:END:
    Will drop you into the python debugger when a test fails.  To learn how to
    use @@texinfo:@command{pdb}@@, check out the [[https://docs.python.org/3/library/pdb.html#debugger-commands][documentation]].  See also
    [[https://www.youtube.com/watch?v=P0pIW5tJrRM][Clayton Parker's "So you think you can pdb?"]]
    : pytest --pdb bob_test.py

*** PEP8
:CI:
#+CINDEX:PEP8
#+CINDEX:style guide, Python
#+CINDEX:~pytest-pep8~
#+CINDEX:pytest
#+CINDEX:pytest-cache
:END:
    PEP8 is the Style Guide for Python Code. If you would like to test for
    compliance to the style guide, install ~pytest-pep8~.
    : pip3 install pytest-pep8

    Then, just add the @@texinfo:@option{--pep8}@@ flag to your command
    : pytest --pep8 bob_test.py

    Read the [[http://pytest.org/latest/contents.html#toc][pytest documentation]] and [[http://pythonhosted.org/pytest-cache/][pytest-cache]] documentation to learn more.

** Resources
   - [[https://exercism.io/tracks/python/learning][Learning Python]]
   - [[https://exercism.io/tracks/python/resources][Useful Python Resource]]
** Hello World
:CI:
#+CINDEX: ``Hello World''
:END:

*** Introduction
    The classical introductory exercise. Just say ``Hello, World!''.  ``Hello,
    World!'' is the traditional first program for beginning programming in a
    new language or environment.

    The objectives are simple:
       + Write a function that returns the string ``Hello, World!''.
       + Run the test suite and make sure that it succeeds.
       + Submit your solution and check it at the website.


    If everything goes well, you will be ready to fetch your first real
    exercise.

*** Exception Messages
:CI:
#+CINDEX:exception, raise
#+CINDEX:raise exception
#+CINDEX:message, exception
#+CINDEX:error message
#+CINDEX:type, exception
:END:
    Sometimes it is necessary to raise an exception. When you do this, you
    should include a meaningful error message to indicate what the source of
    the error is. This makes your code more readable and helps significantly
    with debugging. Not every exercise will require you to raise an exception,
    but for those that do, the tests will only pass if you include a message.

    To raise a message with an exception, just write it as an argument to the
    exception type. For example, instead of raise Exception, you should write:
    : raise Exception("Meaningful message indicating the source of the error")

*** Running the Tests
    To run the tests, run the appropriate command below ([[https://github.com/pytest-dev/pytest/issues/1629#issue-161422224][why they are
    different]]):

**** Python3
     : pytest hello_world_test.py

     Alternatively, you can tell Python to run the pytest module (allowing the
     same command to be used regardless of Python version):
     : python -m pytest hello_world_test.py

***** Common ~pytest~ options
      - ~-v~ :: enable verbose output
      - ~-x~ :: stop running tests on first failure
      - ~--ff~ :: run failures from previous test before running other test
                 cases


      For other options, see ~python -m pytest -h~

*** Submitting Exercises
    Note that, when trying to submit an exercise, make sure the solution is in
    the ~$EXERCISM_WORKSPACE/python/hello-world~ directory.

    You can find your Exercism workspace by running ~exercism debug~ and looking
    for the line that starts with ~Workspace~.

    For more detailed information about running tests, code style and linting,
    please see *Running the Tests*.

*** Source
    This is an exercise to introduce users to using Exercism.

    [[http://en.wikipedia.org/wiki/%22Hello,_world!%22_program]]

*** Submitting Incomplete Solutions
    It's possible to submit an incomplete solution so you can see how others
    have completed the exercise.

*** Download Your Solution

    Changed computer or want to re-download the exercise after updating to the
    latest version? Use this command:
    : exercism download --exercise=hello-world --track=python

*** Hello World Source and Test

    #+begin_src python -n :tangle python/hello-world/hello_world.py
    def hello():
      return "Hello, World!"
   #+end_src

   #+begin_src python -n :tangle python/hello-world/hello_world_test.py

   import unittest

   import hello_world


   # Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0

   class HelloWorldTest(unittest.TestCase):
     def test_hello(self):
       self.assertEqual(hello_world.hello(), 'Hello, World!')


   if __name__ == '__main__':
     unittest.main()
   #+end_src

* CONCEPT INDEX
  :PROPERTIES:
  :INDEX:    cp
  :END:

* PROGRAM INDEX
  :PROPERTIES:
  :INDEX:    pg
  :END:

* EXPORT SETUP                                                     :noexport:
#+TEXINFO_FILENAME:Exercism.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+TEXINFO_DIR_CATEGORY:Coding
#+TEXINFO_DIR_TITLE:Exercises
#+TEXINFO_DIR_DESC:Site for coding exercises
#+TEXINFO_PRINTED_TITLE:Exercism Exercises in Writing

* MACRO DEFINITIONS                                                :noexport:
  #+MACRO: heading @@texinfo:@heading @@$1
  #+MACRO: subheading @@texinfo:@subheading @@$1
